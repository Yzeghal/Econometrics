#print(second_term)
matrix.inverse(J_hat)%*%second_term
}
Beta_hat=Beta2(Xij,Yij)
#Difference with built in
l<-lm(y~x)
Beta_hat=Beta2(Xij,Yij)
Beta_hat
Beta_hat=Beta(Xij,Yij)
Beta_hat
#generating data
Beta_0 = matrix(c(1,2,4)) #constant coefficient included
n=100
Ui=runif(n,0,1)
Uj=runif(n,0,1)
Uij=matrix(runif(n^2,0,1),ncol=n)
f<-function(Ui,Uj,Uij){
#function f
Xij=matrix(c(1,log(Ui),Ui+Uj)) #constant added here
# print(Xij)
Yij=t(Beta_0)%*%matrix(Xij)+Uij/10-0.05
# print(Yij)
return (array(c(Xij,Yij),c(1,length(Beta_0)+1)))
}
M=array(0,c(n,n,length(Beta_0)+1))
for(i in 1:n){
for(j in 1:n){
M[i,j,]=f(Ui[i],Uj[j],Uij[i,j])
}
}
dispatch_na<-function(Arr,ind=2){
r=runif(dim(Arr)[1]*dim(Arr)[2],0,1)>0.9
#print(r)
frame=Arr[,,ind]
frame[r]<-NA
#print(frame)
Arr[,,ind]=frame
Arr
}
M=dispatch_na(M, ind=2)
M=dispatch_na(M, ind=3)
M=dispatch_na(M, ind=4)
Xij=M[,,1:length(Beta_0)]
Yij=M[,,length(Beta_0)+1]
#transforming data to give them to lm()
x1=as.vector(Xij[,,2])
x2=as.vector(Xij[,,3])
x=matrix(c(x1,x2),ncol=2)
y=matrix(as.vector(Yij[,]))
#Computations
spot_na<-function(A){
any(is.na(A))
}
map_na<-function(Arr){
apply(Arr,c(1,2),spot_na) #applies spot_na to all dimensions having dimensions 1 and 2 fixed.
}
J<-function(X){
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_na=!map_na(X)
nb_obs=sum(not_na)
M=matrix(0,dim(X)[3],dim(X)[3])
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (not_na[i,j]){
M=M+matrix(X[i,j,])%*% t(matrix(X[i,j,]))
}
}
}
M/nb_obs
}
Beta2<-function(X,Y){
if (any(dim(Y)!=dim(X)[1:2])){
messageX = paste("2 first dimensions of X", dim(X)[1], dim(X)[2])
messageY = paste("\n 2 first dimensions of Y", dim(Y)[1], dim(Y)[2])
stop(paste(messageX,messageY))
}
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_naX=!map_na(X)
not_naY=!map_na(Y)
viable = not_naX&not_naY
#print(viable)
if (any (not_naX!=not_naY)){
messageX = paste("\nnb of values in X:",sum(not_naX))
messageY = paste("\nnb of values in Y:",sum(not_naY))
warning(paste(messageX,messageY,"\nMissing values in X and Y are not at the same places !"))
}
J_hat=J(X)
#print(J_hat)
second_term = matrix(0,dim(X)[3],1)
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (viable[i,j]){
second_term=second_term+X[i,j,]*Y[i,j]
}
}
}
print(paste(sum(viable),'viable terms'))
second_term=second_term/sum(viable)
#print(second_term)
matrix.inverse(J_hat)%*%second_term
}
Beta<-function(X,Y){ #Does the match with lm results (which simply drops all observations) and seems more precise...
if (any(dim(Y)!=dim(X)[1:2])){
messageX = paste("2 first dimensions of X", dim(X)[1], dim(X)[2])
messageY = paste("\n 2 first dimensions of Y", dim(Y)[1], dim(Y)[2])
stop(paste(messageX,messageY))
}
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_naX=!map_na(X)
not_naY=!map_na(Y)
viable = not_naX&not_naY
#print(viable)
if (any (not_naX!=not_naY)){
messageX = paste("\nnb of values in X:",sum(not_naX))
messageY = paste("\nnb of values in Y:",sum(not_naY))
message(paste(messageX,messageY,"\nMissing values in X and Y are not at the same places !"))
}
for (i in 1:dim(X)[3]){
X[,,i]=ifelse(viable ,X[,,i],NA)
}
#print(X)
J_hat=J(X)
#print(J_hat)
second_term = matrix(0,dim(X)[3],1)
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (viable[i,j]){
second_term=second_term+X[i,j,]*Y[i,j]
}
}
}
print(paste(sum(viable),'viable terms'))
second_term=second_term/sum(viable)
#print(second_term)
matrix.inverse(J_hat)%*%second_term
}
#Difference with built in
l<-lm(y~x)
Beta_hat=Beta(Xij,Yij)
Beta_hat
l$coefficients
Beta_hat=Beta2(Xij,Yij)
Beta_hat
View(reg)
rem(list=ls())
rm(list=ls())
beta
beta(x,y)
help(beta)
library(matrixcalc) #for matrix inversion and others
library(MASS)#to generate multivariate data
library(lmtest) #to perform test with specified indications with coeftest
library(sandwich) # to compute heteroscedasticity robust tests : vcovHC(reg, type = "HC0")
#generating data
#set.seed(0)
eps=rnorm(1000, mean=0, sd=0.2)
l=2
d=diag(l)
d2=cbind(d,matrix(rep(0,l)))[,l:(l+1)]
d<-d+d2
sigma<-(d+t(d))/2
beta= matrix(c(2,4))
x=mvrnorm(1000,c(0,0),sigma[1:l,1:l])
y=x%*%beta+eps
y=y+x[,1]^2*x[,2]^3 #to add some omitted variable
coefs<-function(X,Y){
nx=dim(X)[1]
ny=dim(Y)[1]
if (nx!=ny){stop('not the same number of observations')}
X=cbind(rep(1,nx),X)
M=t(X)%*%X
if (det(M)==0){stop('Matrix X\'X non inversible !')}
matrix.inverse(t(X)%*%X)%*%(t(X)%*%Y)
}
coefs_barbarian<-function(X,Y){
#Does the same job as coef but is more easily modifiable for NAs.
nx=dim(X)[1]
ny=dim(Y)[1]
if (nx!=ny){stop('not the same number of observations')}
X=cbind(rep(1,nx),X)
M1=0
M2=0
for (i in 1:nx){
M1=M1+matrix(X[i,])%*% t(X[i,])
}
M1=matrix.inverse(M1/nx)
for (i in 1:nx){
M2=M2+matrix(X[i,])*Y[i,]
}
M2=M2/nx
Beta_hat = M1%*%M2
return(Beta_hat)
}
estimate<-function(X,Beta_hat){
nx=dim(X)[1]
X=cbind(matrix(rep(1),nx),X)
Y_hat=X%*%Beta_hat
}
asymptotic_variance<-function(X,Y){
nx=dim(X)[1]
beta_hat=coefs(X,Y)
eps_hat=Y-estimate(X,beta_hat)
d_eps=diag(as.vector(eps_hat))
#print(dim(d_eps))
X=cbind(rep(1,nx),X)
X_eps = d_eps%*%X
#print(dim(X_eps))
middle_term = t(X_eps)%*%(X_eps)*nx
#print(dim(middle_term))
sandwich_term= matrix.inverse(t(X)%*%X)
#print(dim(sandwich_term))
var = sandwich_term %*% middle_term %*% sandwich_term
}
standard_errors<-function (var,nx){
s=matrix(sqrt(diag(var)/nx))
}
student_t<-function(Beta_hat,sd,hyp = 0){
t=(Beta_hat-hyp)/sd
return(t)
}
p_values<-function(Beta_hat, sd ,nx , hyp = 0){
deg_freedom = nx-length(Beta_hat)
t=abs(student_t(Beta_hat, sd, hyp))
p=2*(1-(pt(t,deg_freedom)))
return(p)
}
reg_OLS<-function(X,Y,hyp=0){
if (!is.matrix(X)){
stop("X should be a matrix")
}
if (!is.matrix(Y)){
stop("Y should be a matrix")
}
nx=dim(X)[1]
ny=dim(Y)[1]
if (nx!=ny){
message=paste(nx, 'Observations for X\n',ny, 'observations for Y\nMake sure Nx==Ny')
stop(message)}
Beta_hat=coefs(X,Y)
Y_hat=estimate(X,Beta_hat)
eps_hat=Y-Y_hat
asvar=asymptotic_variance(X,Y)
se=standard_errors(asvar,nx)
t=student_t(Beta_hat,se,hyp)
p=p_values(Beta_hat,se,nx,hyp)
R2=sum((Y_hat-mean(Y_hat))^2)/sum((Y-mean(Y))^2)
if (sum(abs(hyp))==0){hyp = rep(0,length(Beta_hat))}
values = matrix(c(Beta_hat,se,t,p,hyp), ncol=5)
colnames(values)=c('Beta_hat', 'Std_Err','Student_t','p-values', 'H0_hyp')
return(list('R2'=R2, 'values' = values))
}
#homemade model fitting
ols<-reg_OLS(x,y, hyp=c(0,0,0))
print(ols)
#built-in model fitting
reg=lm(y~x)
tests=coeftest(reg, vcov = vcovHC(reg, type = "HC0")) #performs tests on the model reg with the variance matrix calculated with vcovHC
#comparaison
print(ols$values[,1]-tests[,1]) #difference between built-in and homemade estimators
print(ols$values[,2]-tests[,2]) #difference between built-in and homemade std error
rem(list=ls())
mr(list=ls())
rm(list=ls())
# Script for MCO in the case of jointly echangeable and dissociated arrays.
library(matrixcalc) #for matrix inversion and others
library(MASS)#to generate multivariate data
library(lmtest) #to perform test with specified indications with coeftest
library(sandwich) # to compute heteroscedasticity robust tests : vcovHC(reg, type = "HC0")
#generating data
Beta_0 = matrix(c(1,2,4)) #constant coefficient included
n=100
Ui=runif(n,0,1)
Uj=runif(n,0,1)
Uij=matrix(runif(n^2,0,1),ncol=n)
f<-function(Ui,Uj,Uij){
#function f
Xij=matrix(c(1,log(Ui),Ui+Uj)) #constant added here
# print(Xij)
Yij=t(Beta_0)%*%matrix(Xij)+Uij/10-0.05
# print(Yij)
return (array(c(Xij,Yij),c(1,length(Beta_0)+1)))
}
M=array(0,c(n,n,length(Beta_0)+1))
for(i in 1:n){
for(j in 1:n){
M[i,j,]=f(Ui[i],Uj[j],Uij[i,j])
}
}
dispatch_na<-function(Arr,ind=2){
r=runif(dim(Arr)[1]*dim(Arr)[2],0,1)>0.9
#print(r)
frame=Arr[,,ind]
frame[r]<-NA
#print(frame)
Arr[,,ind]=frame
Arr
}
M=dispatch_na(M, ind=2)
M=dispatch_na(M, ind=3)
M=dispatch_na(M, ind=4)
Xij=M[,,1:length(Beta_0)]
Yij=M[,,length(Beta_0)+1]
#transforming data to give them to lm()
x1=as.vector(Xij[,,2])
x2=as.vector(Xij[,,3])
x=matrix(c(x1,x2),ncol=2)
y=matrix(as.vector(Yij[,]))
#Computations
spot_na<-function(A){
any(is.na(A))
}
map_na<-function(Arr){
apply(Arr,c(1,2),spot_na) #applies spot_na to all dimensions having dimensions 1 and 2 fixed.
}
J<-function(X){
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_na=!map_na(X)
nb_obs=sum(not_na)
M=matrix(0,dim(X)[3],dim(X)[3])
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (not_na[i,j]){
M=M+matrix(X[i,j,])%*% t(matrix(X[i,j,]))
}
}
}
M/nb_obs
}
Beta2<-function(X,Y){
if (any(dim(Y)!=dim(X)[1:2])){
messageX = paste("2 first dimensions of X", dim(X)[1], dim(X)[2])
messageY = paste("\n 2 first dimensions of Y", dim(Y)[1], dim(Y)[2])
stop(paste(messageX,messageY))
}
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_naX=!map_na(X)
not_naY=!map_na(Y)
viable = not_naX&not_naY
#print(viable)
if (any (not_naX!=not_naY)){
messageX = paste("\nnb of values in X:",sum(not_naX))
messageY = paste("\nnb of values in Y:",sum(not_naY))
warning(paste(messageX,messageY,"\nMissing values in X and Y are not at the same places !"))
}
J_hat=J(X)
#print(J_hat)
second_term = matrix(0,dim(X)[3],1)
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (viable[i,j]){
second_term=second_term+X[i,j,]*Y[i,j]
}
}
}
print(paste(sum(viable),'viable terms'))
second_term=second_term/sum(viable)
#print(second_term)
matrix.inverse(J_hat)%*%second_term
}
Beta<-function(X,Y){ #Does the match with lm results (which simply drops all observations) and seems more precise...
if (any(dim(Y)!=dim(X)[1:2])){
messageX = paste("2 first dimensions of X", dim(X)[1], dim(X)[2])
messageY = paste("\n 2 first dimensions of Y", dim(Y)[1], dim(Y)[2])
stop(paste(messageX,messageY))
}
if (dim(X)[1]!=dim(X)[2]){
stop("Matrix X is not square !")
}
not_naX=!map_na(X)
not_naY=!map_na(Y)
viable = not_naX&not_naY
#print(viable)
if (any (not_naX!=not_naY)){
messageX = paste("\nnb of values in X:",sum(not_naX))
messageY = paste("\nnb of values in Y:",sum(not_naY))
message(paste(messageX,messageY,"\nMissing values in X and Y are not at the same places !"))
}
for (i in 1:dim(X)[3]){
X[,,i]=ifelse(viable ,X[,,i],NA)
}
#print(X)
J_hat=J(X)
#print(J_hat)
second_term = matrix(0,dim(X)[3],1)
for (i in 1:dim(X)[1]){
for (j in 1:dim(X)[1]){
if (viable[i,j]){
second_term=second_term+X[i,j,]*Y[i,j]
}
}
}
print(paste(sum(viable),'viable terms'))
second_term=second_term/sum(viable)
#print(second_term)
matrix.inverse(J_hat)%*%second_term
}
#Difference with built in
l<-lm(y~x)
Beta_hat=Beta(Xij,Yij)
l$coefficients
Beta_hat
Y
Yij
Xij
Xij
Xij[,,2]
Xij[,,3]
Xij[,,2]
Beta_hat
Beta_hat%*%Xij
n=10
Ui=runif(n,0,1)
Uj=runif(n,0,1)
Uij=matrix(runif(n^2,0,1),ncol=n)
f<-function(Ui,Uj,Uij){
#function f
Xij=matrix(c(1,log(Ui),Ui+Uj)) #constant added here
# print(Xij)
Yij=t(Beta_0)%*%matrix(Xij)+Uij/10-0.05
# print(Yij)
return (array(c(Xij,Yij),c(1,length(Beta_0)+1)))
}
M=array(0,c(n,n,length(Beta_0)+1))
for(i in 1:n){
for(j in 1:n){
M[i,j,]=f(Ui[i],Uj[j],Uij[i,j])
}
}
dispatch_na<-function(Arr,ind=2){
r=runif(dim(Arr)[1]*dim(Arr)[2],0,1)>0.9
#print(r)
frame=Arr[,,ind]
frame[r]<-NA
#print(frame)
Arr[,,ind]=frame
Arr
}
M=dispatch_na(M, ind=2)
M=dispatch_na(M, ind=3)
M=dispatch_na(M, ind=4)
Xij=M[,,1:length(Beta_0)]
Yij=M[,,length(Beta_0)+1]
#transforming data to give them to lm()
x1=as.vector(Xij[,,2])
x2=as.vector(Xij[,,3])
x=matrix(c(x1,x2),ncol=2)
y=matrix(as.vector(Yij[,]))
#Computations
spot_na<-function(A){
any(is.na(A))
}
#Difference with built in
l<-lm(y~x)
Beta_hat=Beta(Xij,Yij)
Beta_hat
eps
Beta_hat%*%Xij
dim(Beta_hat%*%Xij)
eps<-function(X,Y,b){
apply(X,margins = c(1,2), function(x) t(x)%*%b)
}
eps(Xij,Yij,Beta_hat)
eps<-function(X,Y,b){
apply(X,margins = c(1,2), (function(x){t(x)%*%b}))
}
eps(Xij,Yij,Beta_hat)
eps<-function(X,Y,b){
apply(X,MARGIN=c(1,2), FUN =(function(x){t(x)%*%b}))
}
eps(Xij,Yij,Beta_hat)
eps<-function(X,Y,b){
Y-apply(X,MARGIN=c(1,2), FUN =(function(x){t(x)%*%b}))
}
eps(Xij,Yij,Beta_hat)
Wij
Xij
apply(X,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
apply(Xij,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
Xij
m
M
m
m=array(0, c(5,5,3))
m
m[,,1]=1
m[,,2]=2
m[,,3]=3
m
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%b}))
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%beta}))
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
m[4,4,3]=5
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
m[4,5,3]=
6
m
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
m[4,4,3]=NA
M
m
apply(m,MARGIN=c(1,2), FUN =(function(x){t(x)%*%Beta_0}))
